// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========================================
// USER MANAGEMENT
// ========================================

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  firstName     String?
  lastName      String?
  avatar        String?
  role          UserRole @default(USER)
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  workspaces    WorkspaceMember[]
  accountProviders AccountProvider[]
  auditLogs     AuditLog[]
  userTemplates UserTemplate[]

  @@map("users")
}

model AccountProvider {
  id              String   @id @default(cuid())
  userId          String
  provider        String   // "google", "github", "shopify", etc.
  providerUserId  String
  accessToken     String?
  refreshToken    String?
  expiresAt       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@map("account_providers")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  plan        Plan     @default(STARTER)
  status      WorkspaceStatus @default(ACTIVE)
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members     WorkspaceMember[]
  stores      Store[]
  launches    Launch[]
  campaigns   Campaign[]
  events      Event[]
  messages    Message[]
  embeddings  Embedding[]
  billingCustomer BillingCustomer?
  subscriptions Subscription[]
  usage       Usage[]
  auditLogs   AuditLog[]
  shopifyConnections ShopifyConnection[]
  creativeRefresh CreativeRefresh?
  creativeTemplates CreativeTemplate[]
  chatbots    Chatbot[]
  conversations Conversation[]
  conversationMessages ConversationMessage[]
  marketplaceOrders MarketplaceOrder[]
  cartItems   CartItem[]
  aiLogs      AILog[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String
  role        MemberRole @default(VIEWER)
  joinedAt    DateTime @default(now())

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

// ========================================
// E-COMMERCE DATA
// ========================================

model Store {
  id          String   @id @default(cuid())
  workspaceId String
  platform    Platform
  name        String
  domain      String?
  accessToken String?
  refreshToken String?
  status      StoreStatus @default(ACTIVE)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  products    Product[]
  customers   Customer[]
  orders      Order[]
  carts       Cart[]
  shopifyConnection ShopifyConnection?
  creativeTemplates CreativeTemplate[]
  templateCollections TemplateCollection[]

  @@map("stores")
}

model ShopifyConnection {
  id          String   @id @default(cuid())
  workspaceId String
  storeId     String?  @unique // Optional link to Store model
  shop        String   // Shopify shop domain (e.g., "my-store.myshopify.com")
  accessToken String   // OAuth access token
  scope       String   // OAuth scopes granted
  shopifyId   String?  // Shopify shop ID
  shopName    String?  // Shop name from Shopify
  email       String?  // Shop owner email
  country     String?  // Shop country
  currency    String?  // Shop currency
  timezone    String?  // Shop timezone
  status      ShopifyConnectionStatus @default(ACTIVE)
  expiresAt   DateTime? // Token expiration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  store       Store?    @relation(fields: [storeId], references: [id])

  @@unique([workspaceId, shop])
  @@map("shopify_connections")
}

model Product {
  id          String   @id @default(cuid())
  storeId     String
  title       String
  description String?
  category    String?
  brand       String?
  price       Decimal  @db.Decimal(10, 2)
  sku         String?
  images      String[] // Array of image URLs
  attributes  Json?    // Product attributes as JSON
  status      ProductStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  variants    Variant[]
  launches    Launch[]
  chatbots    Chatbot[] @relation("ChatbotProducts")
  productVariants ProductVariant[]
  marketplaceOrderItems MarketplaceOrderItem[]
  cartItems   CartItem[]

  @@map("products")
}

model Variant {
  id        String   @id @default(cuid())
  productId String
  options   Json     // Variant options (size, color, etc.)
  price     Decimal  @db.Decimal(10, 2)
  stock     Int      @default(0)
  sku       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("variants")
}

model Customer {
  id        String   @id @default(cuid())
  storeId   String
  email     String?
  phone     String?
  firstName String?
  lastName  String?
  country   String?
  city      String?
  state     String?
  zipCode   String?
  address   String?
  isPremium Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders    Order[]
  carts     Cart[]

  @@unique([storeId, email])
  @@index([isPremium])
}

model Order {
  id         String   @id @default(cuid())
  storeId    String
  customerId String?
  externalId String?  // Shopify order ID
  orderNumber String? // Shopify order number
  items      Json     // Order items as JSON
  total      Decimal  @db.Decimal(10, 2)
  status     OrderStatus @default(PENDING)
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  store      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  customer   Customer? @relation(fields: [customerId], references: [id])
  returnRisk ReturnRisk?

  @@unique([storeId, externalId])
  @@map("orders")
}

model Cart {
  id        String   @id @default(cuid())
  storeId   String
  customerId String?
  items     Json     // Cart items as JSON
  subtotal  Decimal  @db.Decimal(10, 2)
  status    CartStatus @default(ACTIVE)
  metadata  Json?    // Additional cart tracking data (cartToken, sessionId, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  customer  Customer? @relation(fields: [customerId], references: [id])

  @@map("carts")
}

// ========================================
// WHATSAPP MARKETPLACE DATA
// ========================================

model Chatbot {
  id                 String      @id @default(cuid())
  workspaceId        String
  name               String
  type               ChatbotType
  isActive           Boolean     @default(true)
  accuracy           Float       @default(0)
  totalConversations Int         @default(0)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  flows         FlowNode[]
  prompts       PromptBot?
  conversations Conversation[]
  products      Product[]      @relation("ChatbotProducts")

  @@map("chatbots")
}

model FlowNode {
  id        String   @id @default(cuid())
  chatbotId String
  title     String
  message   String
  options   Json // [{"label": "Yes", "nextNodeId": "uuid"}, ...]
  order     Int // optional: for ordering
  xPos      Int     @default(0)
  yPos      Int     @default(0)
  createdAt DateTime @default(now())

  chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@map("flow_nodes")
}

model PromptBot {
  id          String          @id @default(cuid())
  chatbotId   String          @unique
  prompt      String
  modelUsed   String // e.g., "gpt-4", "gpt-3.5"
  temperature Float           @default(0.7)
  versions    PromptVersion[]
  chatbot     Chatbot         @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@map("prompt_bots")
}

model PromptVersion {
  id          String    @id @default(cuid())
  prompt      String
  modelUsed   String
  promptBotId String
  promptBot   PromptBot @relation(fields: [promptBotId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@map("prompt_versions")
}

model Conversation {
  id           String             @id @default(cuid())
  chatbotId    String
  workspaceId  String?
  sessionId    String
  accuracy     Float?
  createdAt    DateTime           @default(now())
  status       ConversationStatus @default(ACTIVE)
  startedAt    DateTime           @default(now())
  lastActiveAt DateTime?
  metadata     Json?

  chatbot   Chatbot    @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  workspace Workspace? @relation(fields: [workspaceId], references: [id])
  messages  ConversationMessage[]

  @@unique([sessionId, chatbotId])
  @@map("conversations")
}

model ConversationMessage {
  id             String        @id @default(cuid())
  conversationId String
  workspaceId    String?
  fromBot        Boolean
  phone          String?
  content        String
  timestamp      DateTime      @default(now())
  aiSummary      String?
  intent         String?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  workspace    Workspace?   @relation(fields: [workspaceId], references: [id])

  @@map("conversation_messages")
}

model MarketplaceOrder {
  id        String      @id @default(cuid())
  orderId   String      @unique
  customer  String
  product   String
  amount    Float
  status    MarketplaceOrderStatus
  date      DateTime
  workspaceId String?
  estimatedDelivery DateTime?
  items     MarketplaceOrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  workspace Workspace? @relation(fields: [workspaceId], references: [id])

  @@map("marketplace_orders")
}

model MarketplaceOrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int
  price     Float

  order   MarketplaceOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("marketplace_order_items")
}

model ProductVariant {
  id         String      @id @default(cuid())
  name       String
  price      Float
  stock      Int
  productId  String
  sku        String?
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems MarketplaceOrderItem[]

  @@map("product_variants")
}

model CartItem {
  id        String   @id @default(cuid())
  sessionId String
  productId String
  quantity  Int      @default(1)
  workspaceId String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  workspace Workspace? @relation(fields: [workspaceId], references: [id])

  @@map("cart_items")
}

model SyncHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  type      String // "shopify" or "woocommerce"
  status    String // "success" or "failed"
  error        String?
  warning      String?
  metadata     Json?
  deletedCount Int     @default(0)
  duration     Int     @default(0)
  productCount Int     @default(0)
  variantCount Int     @default(0)

  @@map("sync_history")
}

model AILog {
  id        String   @id @default(cuid())
  workspaceId String?
  input     String
  response  String
  modelUsed String
  createdAt DateTime @default(now())

  workspace Workspace? @relation(fields: [workspaceId], references: [id])

  @@map("ai_logs")
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  keywords  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

// ========================================
// AI/ML DATA
// ========================================

model Launch {
  id          String   @id @default(cuid())
  workspaceId String
  productId   String?
  name        String
  status      LaunchStatus @default(DRAFT)
  inputs      Json     // Launch inputs (product URL, brand tone, etc.)
  outputs     Json?    // Generated assets
  scheduleAt  DateTime?
  metrics     Json?    // Performance metrics
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  product     Product?  @relation(fields: [productId], references: [id])
  adCreatives AdCreative[]
  abTests     ABTest[]

  @@map("launches")
}

model AdCreative {
  id        String   @id @default(cuid())
  launchId  String
  platform  String   // "meta", "tiktok", "google"
  inputs    Json     // Creative inputs
  outputs   Json?    // Generated creative assets
  status    AdCreativeStatus @default(DRAFT)
  metrics   Json?    // Performance metrics
  templateId String? // Reference to creative template
  abTestId  String?  // Reference to A/B test
  variationId String? // Reference to creative variation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  launch    Launch   @relation(fields: [launchId], references: [id], onDelete: Cascade)
  template  CreativeTemplate? @relation(fields: [templateId], references: [id])
  abTest    ABTest? @relation(fields: [abTestId], references: [id])
  variation CreativeVariation? @relation(fields: [variationId], references: [id])
  performance CreativePerformance[]
  images    CreativeImage[]
  imageJobs  ImageGenerationJob[]

  @@unique([launchId, platform])
  @@map("ad_creatives")
}

// Enhanced CreativeTemplate model for template builder system

model ABTest {
  id              String   @id @default(cuid())
  launchId        String
  testType        String   // "headline", "image", "cta", "color", "audience"
  variationCount  Int      // Number of variations
  duration        Int      // Test duration in days
  trafficSplit    String   // "50-50", "60-40", etc.
  successMetric   String   // "ctr", "conversion", "engagement", etc.
  status          ABTestStatus @default(DRAFT)
  startDate       DateTime?
  endDate         DateTime?
  results         Json?    // Test results and winner
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  launch          Launch   @relation(fields: [launchId], references: [id], onDelete: Cascade)
  adCreatives     AdCreative[]
  creativeVariations CreativeVariation[]

  @@map("ab_tests")
}

model CreativeVariation {
  id          String   @id @default(cuid())
  abTestId    String?
  variationNumber Int   // 1, 2, 3, etc.
  headline    String?
  description String?
  cta         String?
  imageStyle  String?
  colorScheme String?
  performance Json?    // Performance metrics for this variation
  isWinner    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  abTest      ABTest? @relation(fields: [abTestId], references: [id], onDelete: Cascade)
  adCreatives AdCreative[]

  @@map("creative_variations")
}

model CreativeRefresh {
  id                  String   @id @default(cuid())
  workspaceId         String
  autoRefresh         Boolean  @default(false)
  refreshInterval     Int      // Days between refreshes
  performanceThreshold Float   // CTR threshold (e.g., 0.02 for 2%)
  optimizationType    String   // "automatic", "suggested", "conservative"
  lastRefreshAt       DateTime?
  nextRefreshAt       DateTime?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  workspace           Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId])
  @@map("creative_refresh")
}

model CreativePerformance {
  id          String   @id @default(cuid())
  creativeId  String
  date        DateTime
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  spend       Decimal  @db.Decimal(10, 2) @default(0)
  ctr         Float    @default(0)
  cpc         Decimal  @db.Decimal(10, 2) @default(0)
  conversionRate Float @default(0)
  roas        Float    @default(0)
  createdAt   DateTime @default(now())

  // Relations
  creative    AdCreative @relation(fields: [creativeId], references: [id], onDelete: Cascade)

  @@unique([creativeId, date])
  @@map("creative_performance")
}

model Message {
  id        String   @id @default(cuid())
  workspaceId String
  channel   MessageChannel
  to        String   // Recipient (phone, email, etc.)
  from      String   // Sender
  direction MessageDirection
  body      String
  metadata  Json?    // Message metadata
  status    MessageStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("messages")
}


model ReturnRisk {
  id             String   @id @default(cuid())
  orderId        String   @unique
  probability    Float    // Return probability (0-1)
  factors        Json?    // Risk factors
  recommendation Json?    // Prevention recommendations
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("return_risks")
}

model Embedding {
  id         String   @id @default(cuid())
  workspaceId String
  entityType String   // "product", "customer", "content"
  entityId   String
  // vector     Unsupported("vector(1536)") // pgvector column - temporarily disabled
  model      String   // Embedding model used
  metadata   Json?
  createdAt  DateTime @default(now())

  // Relations
  workspace  Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, entityType, entityId])
  @@map("embeddings")
}

// ========================================
// ANALYTICS & BILLING
// ========================================

model Event {
  id          String   @id @default(cuid())
  workspaceId String
  type        String   // Event type
  payload     Json     // Event data
  ts          DateTime @default(now())

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Campaign {
  id          String   @id @default(cuid())
  workspaceId String
  type        CampaignType
  name        String
  status      CampaignStatus @default(DRAFT)
  metrics     Json?    // Campaign metrics
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("campaigns")
}

model BillingCustomer {
  id               String   @id @default(cuid())
  workspaceId      String   @unique
  stripeCustomerId String   @unique
  email            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("billing_customers")
}

model Subscription {
  id                String   @id @default(cuid())
  workspaceId       String
  plan              Plan
  status            SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String? @unique
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Usage {
  id          String   @id @default(cuid())
  workspaceId String
  metric      String   // "launch.generations", "ads.variants", etc.
  quantity    Int
  periodStart DateTime
  periodEnd   DateTime
  createdAt   DateTime @default(now())

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("usage")
}

model AuditLog {
  id          String   @id @default(cuid())
  workspaceId String
  actorId     String
  action      String   // Action performed
  target      String   // Target resource
  diff        Json?    // Changes made
  ts          DateTime @default(now())

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  actor       User     @relation(fields: [actorId], references: [id])

  @@map("audit_logs")
}

// ========================================
// ENUMS
// ========================================

enum UserRole {
  ADMIN
  USER
}

enum MemberRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum Plan {
  STARTER
  GROWTH
  PRO
}

enum WorkspaceStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum Platform {
  SHOPIFY
  WOOCOMMERCE
  CUSTOM
}

enum StoreStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum CartStatus {
  ACTIVE
  CHECKOUT_STARTED
  ABANDONED
  CONVERTED
}

enum LaunchStatus {
  DRAFT
  GENERATING
  COMPLETED
  FAILED
  SCHEDULED
}

enum AdCreativeStatus {
  DRAFT
  GENERATING
  COMPLETED
  FAILED
  PUBLISHED
  TESTING
  OPTIMIZING
}

enum ABTestStatus {
  DRAFT
  RUNNING
  COMPLETED
  PAUSED
  FAILED
}

enum MessageChannel {
  EMAIL
  SMS
  WHATSAPP
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum CampaignType {
  LAUNCH
  ADS
  EMAIL
  SOCIAL
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  UNPAID
}

enum ShopifyConnectionStatus {
  ACTIVE
  EXPIRED
  REVOKED
  ERROR
}

enum ChatbotType {
  FLOW
  PROMPT
}

enum ConversationStatus {
  ACTIVE
  PENDING
  RESOLVED
  BOT_HANDLED
}

enum MarketplaceOrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

// ========================================
// IMAGE GENERATION MODELS
// ========================================

model CreativeImage {
  id          String   @id @default(cuid())
  creativeId  String
  imageUrl    String
  prompt      String?  // AI prompt used to generate this image
  metadata    Json?    // Additional metadata (style, background, etc.)
  type        ImageType @default(GENERATED)
  status      ImageStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creative    AdCreative @relation(fields: [creativeId], references: [id], onDelete: Cascade)
  variations  ImageVariation[]

  @@map("creative_images")
}

model ImageVariation {
  id              String   @id @default(cuid())
  originalImageId String
  variationType   String   // "background", "style", "composition", "color"
  imageUrl        String
  prompt          String?  // AI prompt for this variation
  metadata        Json?    // Variation-specific metadata
  status          ImageStatus @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  originalImage   CreativeImage @relation(fields: [originalImageId], references: [id], onDelete: Cascade)

  @@map("image_variations")
}

model ImageGenerationJob {
  id          String   @id @default(cuid())
  creativeId  String
  jobType     String   // "generate", "enhance", "variation", "mockup"
  status      JobStatus @default(PENDING)
  prompt      String
  options     Json?    // Generation options
  result      Json?    // Generated image data
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creative    AdCreative @relation(fields: [creativeId], references: [id], onDelete: Cascade)

  @@map("image_generation_jobs")
}

enum ImageType {
  ORIGINAL
  GENERATED
  ENHANCED
  VARIATION
  MOCKUP
}

enum ImageStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Custom Template Builder System
model CreativeTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   // instagram, facebook, tiktok, pinterest, linkedin
  subcategory String?  // business, lifestyle, fashion, tech, etc.
  tags        String[] // ["minimal", "bold", "luxury", "modern"]
  
  // Template settings (JSON)
  settings    Json
  
  // Template metadata
  thumbnail   String?  // Preview image URL
  isPublic   Boolean  @default(true)
  isPremium  Boolean  @default(false)
  usageCount Int      @default(0)
  
  // Creator info
  createdBy  String?  // User ID or "system" for built-in templates
  storeId    String?  // Associated store
  workspaceId String? // Associated workspace
  
  // Timestamps
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  store      Store?   @relation(fields: [storeId], references: [id])
  workspace  Workspace? @relation(fields: [workspaceId], references: [id])
  userTemplates UserTemplate[]
  adCreatives AdCreative[]
  
  @@index([category])
  @@index([isPublic])
  @@index([isPremium])
  @@index([createdBy])
}

model UserTemplate {
  id          String   @id @default(cuid())
  userId      String
  templateId  String
  
  // User's customizations
  customSettings Json?
  name          String?
  description   String?
  
  // Usage tracking
  lastUsed      DateTime?
  useCount      Int      @default(0)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
  template      CreativeTemplate @relation(fields: [templateId], references: [id])
  
  @@unique([userId, templateId])
  @@index([userId])
}

model TemplateCategory {
  id          String   @id @default(cuid())
  name        String   // "Business", "Lifestyle", "Fashion"
  slug        String   @unique
  description String?
  icon        String?  // Icon name or URL
  color       String?  // Hex color code
  sortOrder   Int      @default(0)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([sortOrder])
}

model TemplateCollection {
  id          String   @id @default(cuid())
  name        String
  description String?
  thumbnail   String?
  isPublic    Boolean  @default(true)
  isPremium   Boolean  @default(false)
  
  // Collection metadata
  category    String
  tags        String[]
  
  // Creator info
  createdBy   String?
  storeId     String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  store       Store?   @relation(fields: [storeId], references: [id])
  
  @@index([category])
  @@index([isPublic])
  @@index([isPremium])
}

